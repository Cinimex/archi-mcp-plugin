{
  "openapi": "3.0.3",
  "info": {
    "title": "Archi MCP API (v9.1 batch writes)",
    "version": "0.1.0-v9.1"
  },
  "servers": [
    { "url": "http://127.0.0.1:8765" }
  ],
  "security": [
    { "BearerAuth": [] }
  ],
  "tags": [
    { "name": "System", "description": "Service info and meta endpoints" },
    { "name": "Types", "description": "Element, relation, and view types" },
    { "name": "Folders", "description": "Model folder tree operations" },
    { "name": "Search", "description": "Search across elements, relations, and views" },
    { "name": "Elements", "description": "Element CRUD and related operations" },
    { "name": "Relations", "description": "Relation CRUD and related operations" },
    { "name": "Views", "description": "View CRUD and diagram operations" },
    { "name": "Model", "description": "Model lifecycle operations" },
    { "name": "Script", "description": "Scripting engine endpoints" }
  ],
  "paths": {
    "/status": {
      "get": {
        "summary": "Service status",
        "operationId": "getStatus",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": { "type": "boolean" },
                    "service": { "type": "string" },
                    "version": { "type": "string" }
                  },
                  "required": ["ok"]
                }
              }
            }
          }
        }
      }
    },
    "/openapi.json": {
      "get": {
        "summary": "OpenAPI spec",
        "operationId": "getOpenapiSpec",
        "tags": ["System"],
        "responses": { "200": { "description": "Spec" } }
      }
    },

    "/types": {
      "get": {
        "summary": "List supported element/relation/view types",
        "operationId": "listTypes",
        "tags": ["Types"],
        "responses": {
          "200": {
            "description": "Types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "elementTypes": { "type": "array", "items": { "type": "string" } },
                    "relationTypes": { "type": "array", "items": { "type": "string" } },
                    "viewTypes": { "type": "array", "items": { "type": "string" } }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/folders": {
      "get": {
        "summary": "Get model folder tree",
        "operationId": "getFolders",
        "tags": ["Folders"],
        "parameters": [
          { "name": "modelId", "in": "query", "schema": { "type": "string" }, "required": false }
        ],
        "responses": {
          "200": {
            "description": "Folder tree",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Folder" } }
              }
            }
          }
        }
      }
    },
    "/folder/ensure": {
      "post": {
        "summary": "Ensure folder exists by path",
        "operationId": "ensureFolder",
        "tags": ["Folders"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "modelId": { "type": "string" },
                  "path": { "type": "string", "description": "Path like 'Business/Actors'" }
                },
                "required": ["path"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Folder",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Folder" } } }
          }
        }
      }
    },

    "/search": {
      "get": {
        "summary": "Search elements, relations and views (recursive)",
        "operationId": "search",
        "tags": ["Search"],
        "description": "Substring search over available fields. Matching is non-strict (OR): name is always searched; documentation is searched when includeDocs=true; properties (key and value) are searched when includeProps=true. When property=key=value filters are provided, they are applied as strict AND filters in addition to text matching.",
        "parameters": [
          { "name": "q", "in": "query", "schema": { "type": "string" }, "required": false },
          { "name": "kind", "in": "query", "schema": { "type": "string", "enum": ["element", "relation", "view"] }, "required": false },
          { "name": "elementType", "in": "query", "schema": { "type": "string" }, "required": false },
          { "name": "relationType", "in": "query", "schema": { "type": "string" }, "required": false },
          { "name": "modelId", "in": "query", "schema": { "type": "string" }, "required": false },
          { "name": "property", "in": "query", "schema": { "type": "array", "items": { "type": "string", "example": "key=value" } }, "style": "form", "explode": true, "required": false },
          { "name": "includeDocs", "in": "query", "schema": { "type": "boolean", "default": false }, "required": false, "description": "When true, include element/relation documentation in text matching (OR with name)." },
          { "name": "includeProps", "in": "query", "schema": { "type": "boolean", "default": false }, "required": false, "description": "When true, include properties (key and value) in text matching (OR with name/doc)." },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "minimum": 1, "maximum": 1000, "default": 100 }, "required": false },
          { "name": "offset", "in": "query", "schema": { "type": "integer", "minimum": 0, "default": 0 }, "required": false },
          { "name": "debug", "in": "query", "schema": { "type": "boolean", "default": false }, "required": false, "description": "When true, include a 'debug' block in the response with scanned/matched counters and sample matches." },
          { "name": "log", "in": "query", "schema": { "type": "string", "enum": ["stdout", "script"], "default": "stdout" }, "required": false, "description": "Optional log target for debug traces. If unavailable, falls back to stdout." }
        ],
        "responses": {
          "200": { "description": "Search results", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SearchResponse" } } } }
        }
      }
    },

    "/elements": {
      "get": {
        "summary": "Get elements (batch by ids)",
        "operationId": "getElements",
        "tags": ["Elements"],
        "parameters": [
          { "name": "ids", "in": "query", "required": true, "style": "form", "explode": true, "schema": { "type": "array", "maxItems": 50, "items": { "type": "string" } } },
          { "name": "include", "in": "query", "required": false, "schema": { "type": "string", "example": "relations" } },
          { "name": "includeElements", "in": "query", "required": false, "schema": { "type": "boolean", "default": false } }
        ],
        "responses": {
          "200": {
            "description": "Elements",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "oneOf": [ { "$ref": "#/components/schemas/Element" }, { "$ref": "#/components/schemas/ElementWithRelations" } ] } }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create elements (batch)",
        "operationId": "createElements",
        "tags": ["Elements"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array", "maxItems": 50,
                "items": {
                  "type": "object",
                  "properties": {
                    "modelId": { "type": "string" },
                    "type": { "type": "string" },
                    "name": { "type": "string" },
                    "folderId": { "type": "string" },
                    "properties": { "type": "object", "additionalProperties": { "type": "string" } },
                    "documentation": { "type": "string" }
                  },
                  "required": ["type", "name"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Element" } } } }
          }
        }
      },
      "patch": {
        "summary": "Update elements (batch)",
        "operationId": "updateElements",
        "tags": ["Elements"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array", "maxItems": 50,
                "items": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "name": { "type": "string" },
                    "type": { "type": "string" },
                    "folderId": { "type": "string" },
                    "properties": { "type": "object", "additionalProperties": { "type": "string" } },
                    "documentation": { "type": "string" }
                  },
                  "required": ["id"]
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "Updated", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Element" } } } } } }
      },
      "delete": {
        "summary": "Delete elements (batch)",
        "operationId": "deleteElements",
        "tags": ["Elements"],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "array", "maxItems": 50, "items": { "type": "object", "properties": { "id": { "type": "string" } }, "required": ["id"] } } } }
        },
        "responses": { "200": { "description": "Deleted", "content": { "application/json": { "schema": { "type": "object", "properties": { "total": { "type": "integer" }, "deleted": { "type": "integer" } }, "required": ["total","deleted"] } } } } }
      }
    },
    

    "/relations": {
      "get": {
        "summary": "Get relations (batch by ids)",
        "operationId": "getRelations",
        "tags": ["Relations"],
        "parameters": [ { "name": "ids", "in": "query", "required": true, "style": "form", "explode": true, "schema": { "type": "array", "maxItems": 50, "items": { "type": "string" } } } ],
        "responses": { "200": { "description": "Relations", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Relation" } } } } } }
      },
      "post": {
        "summary": "Create relations (batch)",
        "operationId": "createRelations",
        "tags": ["Relations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array", "maxItems": 50,
                "items": {
                  "type": "object",
                  "properties": {
                    "modelId": { "type": "string" },
                    "type": { "type": "string" },
                    "name": { "type": "string" },
                    "sourceId": { "type": "string" },
                    "targetId": { "type": "string" },
                    "folderId": { "type": "string" },
                    "properties": { "type": "object", "additionalProperties": { "type": "string" } },
                    "documentation": { "type": "string" }
                  },
                  "required": ["type", "sourceId", "targetId"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Relation" } } } }
          }
        }
      },
      "patch": {
        "summary": "Update relations (batch)",
        "operationId": "updateRelations",
        "tags": ["Relations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array", "maxItems": 50,
                "items": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "name": { "type": "string" },
                    "type": { "type": "string" },
                    "properties": { "type": "object", "additionalProperties": { "type": "string" } },
                    "documentation": { "type": "string" }
                  },
                  "required": ["id"]
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "Updated", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Relation" } } } } } }
      },
      "delete": {
        "summary": "Delete relations (batch)",
        "operationId": "deleteRelations",
        "tags": ["Relations"],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "array", "maxItems": 50, "items": { "type": "object", "properties": { "id": { "type": "string" } }, "required": ["id"] } } } }
        },
        "responses": { "200": { "description": "Deleted", "content": { "application/json": { "schema": { "type": "object", "properties": { "total": { "type": "integer" }, "deleted": { "type": "integer" } }, "required": ["total","deleted"] } } } } }
      }
    },

    "/views": {
      "get": {
        "summary": "List views",
        "operationId": "listViews",
        "tags": ["Views"],
        "parameters": [ { "name": "modelId", "in": "query", "required": false, "schema": { "type": "string" } } ],
        "responses": { "200": { "description": "Views", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/View" } } } } } }
      },
      "post": {
        "summary": "Create view",
        "operationId": "createView",
        "tags": ["Views"],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "object", "properties": { "modelId": { "type": "string" }, "type": { "type": "string" }, "name": { "type": "string" } }, "required": ["type", "name"] } } }
        },
        "responses": { "201": { "description": "Created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/View" } } } } }
      }
    },
    "/views/{id}": {
      "get": {
        "summary": "Get view",
        "operationId": "getView",
        "tags": ["Views"],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": { "200": { "description": "View", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/View" } } } } }
      },
      "delete": {
        "summary": "Delete view",
        "operationId": "deleteView",
        "tags": ["Views"],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": { "204": { "description": "Deleted" } }
      }
    },
    "/views/{id}/content": {
      "get": {
        "summary": "Get view content (objects, connections, layout)",
        "operationId": "getViewContent",
        "tags": ["Views"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "minimum": 1, "maximum": 5000 }, "required": false },
          { "name": "offset", "in": "query", "schema": { "type": "integer", "minimum": 0 }, "required": false }
        ],
        "responses": { "200": { "description": "Content", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ViewContent" } } } } }
      }
    },
    "/views/{id}/image": {
      "get": {
        "summary": "Render view to image (PNG/SVG)",
        "operationId": "renderViewImage",
        "tags": ["Views"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "format", "in": "query", "required": false, "schema": { "type": "string", "enum": ["png","svg"], "default": "png" } },
          { "name": "scale", "in": "query", "required": false, "schema": { "type": "number", "minimum": 0.1, "maximum": 4.0, "default": 1.0 } },
          { "name": "dpi", "in": "query", "required": false, "schema": { "type": "integer", "minimum": 72, "maximum": 600 }, "description": "PNG only" },
          { "name": "bg", "in": "query", "required": false, "schema": { "type": "string", "default": "transparent" }, "description": "'transparent' or #RRGGBB" },
          { "name": "margin", "in": "query", "required": false, "schema": { "type": "integer", "minimum": 0, "default": 0 } }
        ],
        "responses": {
          "200": { "description": "Image", "content": { "image/png": { "schema": { "type": "string", "format": "binary" } }, "image/svg+xml": { "schema": { "type": "string" } } } },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" },
          "409": { "description": "Conflict (no active model)" }
        }
      }
    },
    "/views/{id}/add-element": {
      "post": {
        "summary": "Add elements to view (batch)",
        "operationId": "addElementsToView",
        "tags": ["Views"],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array", "maxItems": 50,
                "items": {
                  "type": "object",
                  "properties": {
                    "elementId": { "type": "string" },
                    "parentObjectId": { "type": "string", "description": "Optional parent diagram object container to place the element into." },
                    "bounds": { "$ref": "#/components/schemas/Bounds" },
                    "x": { "type": "integer" },
                    "y": { "type": "integer" },
                    "w": { "type": "integer" },
                    "h": { "type": "integer" },
                    "style": { "type": "object", "additionalProperties": { "type": "string" } }
                  },
                  "required": ["elementId"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Added",
            "content": { "application/json": { "schema": { "type": "array", "items": { "type": "object", "properties": { "objectId": { "type": "string" } }, "required": ["objectId"] } } } }
          }
        }
      }
    },
    "/views/{id}/add-relation": {
      "post": {
        "summary": "Add relations to view (batch)",
        "operationId": "addRelationsToView",
        "tags": ["Views"],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array", "maxItems": 50,
                "items": {
                  "type": "object",
                  "properties": {
                    "relationId": { "type": "string", "description": "Existing model relation ID (IArchimateRelationship)." },
                    "sourceObjectId": { "type": "string", "description": "Diagram object ID for the relation source endpoint (optional)." },
                    "targetObjectId": { "type": "string", "description": "Diagram object ID for the relation target endpoint (optional)." },
                    "policy": { "type": "string", "enum": ["auto", "fail"], "default": "auto", "description": "When objectId is not provided, 'auto' will pick the only occurrence per side if unambiguous; 'fail' will return an error." },
                    "suppressWhenNested": { "type": "boolean", "default": true, "description": "Optional. Defaults to true. When true and one endpoint object is an ancestor/descendant of the other within the view, do not create a connection and return {suppressed:true}." }
                  },
                  "required": ["relationId"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Results per item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      { "$ref": "#/components/schemas/Connection" },
                      { "type": "object", "properties": { "suppressed": { "type": "boolean" } }, "required": ["suppressed"] }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/views/{id}/objects/bounds": {
      "patch": {
        "summary": "Update view objects bounds (batch)",
        "operationId": "updateViewObjectsBounds",
        "tags": ["Views"],
        "description": "Path objectId is ignored in batch mode; provide objectId in each item.",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "object", "properties": { "objectId": { "type": "string" }, "x": { "type": "integer" }, "y": { "type": "integer" }, "w": { "type": "integer" }, "h": { "type": "integer" } }, "required": ["objectId"] }
              }
            }
          }
        },
        "responses": { "200": { "description": "Updated", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ViewObject" } } } } } }
      }
    },
    "/views/{id}/objects/move": {
      "patch": {
        "summary": "Move diagram objects into a container (batch)",
        "operationId": "moveViewObjects",
        "tags": ["Views"],
        "description": "Path objectId is ignored in batch mode; provide objectId in each item.",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "objectId": { "type": "string" },
                    "parentObjectId": { "type": "string", "description": "Target container object ID in the same view. Use '0' to move the object to the view root (no parent)." },
                    "bounds": { "$ref": "#/components/schemas/Bounds", "description": "Optional full bounds to set after moving (relative to target container)." },
                    "keepExistingConnection": { "type": "boolean", "default": false, "description": "Optional. Defaults to false. When false and a connection exists between the object and the target container object on this view, that connection is removed automatically after moving (typical nesting behavior). Set true to preserve the connection." }
                  },
                  "required": ["objectId", "parentObjectId"]
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Moved", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ViewObject" } } } } },
          "400": { "description": "Bad Request (invalid params or cycle)" },
          "404": { "description": "Not Found (viewId/objectId/parentObjectId)" },
          "409": { "description": "Conflict (no active model)" }
        }
      }
    },
    "/views/{id}/objects": {
      "delete": {
        "summary": "Remove objects from view (batch)",
        "operationId": "removeViewObjects",
        "tags": ["Views"],
        "description": "Path objectId is ignored in batch mode; provide objectId in each item.",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "maxItems": 50, "items": { "type": "object", "properties": { "objectId": { "type": "string" } }, "required": ["objectId"] } }
            }
          }
        },
        "responses": { "200": { "description": "Removed", "content": { "application/json": { "schema": { "type": "object", "properties": { "total": { "type": "integer" }, "deleted": { "type": "integer" } }, "required": ["total", "deleted"] } } } } }
      }
    },

    "/model/save": {
      "post": {
        "summary": "Save model",
        "operationId": "saveModel",
        "tags": ["Model"],
        "requestBody": { "required": false, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SaveRequest" } } } },
        "responses": { "200": { "description": "Saved", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SaveResponse" } } } } }
      }
    },

    "/script/engines": {
      "get": { "summary": "List available script engines (temporarily disabled)", "tags": ["Script"], "responses": { "501": { "description": "Not Implemented" } } }
    },
    "/script/run": { "post": { "summary": "Run a script (temporarily disabled)", "tags": ["Script"], "responses": { "501": { "description": "Not Implemented" } } } }
  },

  "components": {
    "securitySchemes": {
      "BearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" }
    },
    "schemas": {
      "Folder": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "path": { "type": "string" },
          "children": { "type": "array", "items": { "$ref": "#/components/schemas/FolderChild" } }
        },
        "required": ["id", "name"]
      },
      "FolderChild": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "path": { "type": "string" }
        },
        "required": ["id", "name"]
      },
      "Element": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "modelId": { "type": "string" },
          "type": { "type": "string" },
          "name": { "type": "string" },
          "folderId": { "type": "string" },
          "properties": { "type": "object", "additionalProperties": { "type": "string" } },
          "documentation": { "type": "string" }
        },
        "required": ["id", "type", "name"]
      },
      "ElementWithRelations": {
        "allOf": [
          { "$ref": "#/components/schemas/Element" },
          { "type": "object", "properties": { "relations": { "type": "array", "items": { "oneOf": [ { "$ref": "#/components/schemas/Relation" }, { "$ref": "#/components/schemas/ElementRelationWithEndpoints" } ] } } } }
        ]
      },
      "ElementPatch": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "type": { "type": "string" },
          "folderId": { "type": "string" },
          "properties": { "type": "object", "additionalProperties": { "type": "string" } },
          "documentation": { "type": "string" }
        }
      },
      "Relation": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "modelId": { "type": "string" },
          "type": { "type": "string" },
          "name": { "type": "string" },
          "sourceId": { "type": "string" },
          "targetId": { "type": "string" },
          "properties": { "type": "object", "additionalProperties": { "type": "string" } },
          "documentation": { "type": "string" }
        },
        "required": ["id", "type", "sourceId", "targetId"]
      },
      "RelationPatch": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "type": { "type": "string" },
          "properties": { "type": "object", "additionalProperties": { "type": "string" } },
          "documentation": { "type": "string" }
        }
      },
      "View": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "modelId": { "type": "string" },
          "type": { "type": "string" },
          "name": { "type": "string" }
        },
        "required": ["id", "type", "name"]
      },
      "ViewContent": {
        "type": "object",
        "properties": {
          "width": { "type": "integer" },
          "height": { "type": "integer" },
          "objects": { "type": "array", "items": { "$ref": "#/components/schemas/ViewObject" } },
          "connections": { "type": "array", "items": { "$ref": "#/components/schemas/Connection" } }
        }
      },
      "ViewObject": {
        "type": "object",
        "properties": {
          "objectId": { "type": "string" },
          "type": { "type": "string" },
          "elementId": { "type": "string", "nullable": true },
          "relationId": { "type": "string", "nullable": true },
          "parentObjectId": { "type": "string", "nullable": true },
          "bounds": { "$ref": "#/components/schemas/Bounds" },
          "style": { "type": "object", "additionalProperties": { "type": "string" } }
        },
        "required": ["objectId", "type", "bounds"]
      },
      "Connection": {
        "type": "object",
        "properties": {
          "objectId": { "type": "string" },
          "relationId": { "type": "string" },
          "sourceObjectId": { "type": "string" },
          "targetObjectId": { "type": "string" },
          "bendpoints": { "type": "array", "items": { "$ref": "#/components/schemas/Point" } }
        },
        "required": ["objectId", "relationId", "sourceObjectId", "targetObjectId"]
      },
      "Bounds": {
        "type": "object",
        "properties": {
          "x": { "type": "integer" },
          "y": { "type": "integer" },
          "w": { "type": "integer" },
          "h": { "type": "integer" }
        },
        "required": ["x", "y", "w", "h"]
      },
      "Point": {
        "type": "object",
        "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } },
        "required": ["x", "y"]
      },
      "SearchItem": {
        "type": "object",
        "properties": {
          "kind": { "type": "string", "enum": ["element", "relation", "view"] },
          "element": { "$ref": "#/components/schemas/Element" },
          "relation": { "$ref": "#/components/schemas/Relation" },
          "view": { "$ref": "#/components/schemas/View" }
        }
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "total": { "type": "integer" },
          "items": { "type": "array", "items": { "$ref": "#/components/schemas/SearchItem" } },
          "debug": {
            "type": "object",
            "description": "Present when debug=true. Diagnostic counters and samples.",
            "properties": {
              "query": { "type": "string" },
              "kind": { "type": "string", "nullable": true },
              "includeDocs": { "type": "boolean" },
              "includeProps": { "type": "boolean" },
              "limit": { "type": "integer" },
              "offset": { "type": "integer" },
              "scanned": { "type": "object", "properties": { "folders": { "type": "integer" }, "elements": { "type": "integer" }, "relations": { "type": "integer" }, "views": { "type": "integer" } } },
              "matched": { "type": "object", "properties": { "elements": { "type": "integer" }, "relations": { "type": "integer" }, "views": { "type": "integer" }, "total": { "type": "integer" } } },
              "samples": { "type": "array", "items": { "type": "string" } }
            }
          }
        },
        "required": ["total", "items"]
      },
      "SaveRequest": {
        "type": "object",
        "properties": { "modelId": { "type": "string" }, "createBackup": { "type": "boolean", "default": true } }
      },
      "SaveResponse": {
        "type": "object",
        "properties": { "saved": { "type": "boolean" }, "modelId": { "type": "string" }, "path": { "type": "string" } },
        "required": ["saved"]
      },
      "ElementRelationWithEndpoints": {
        "type": "object",
        "properties": {
          "relation": { "$ref": "#/components/schemas/Relation" },
          "source": { "$ref": "#/components/schemas/Element" },
          "target": { "$ref": "#/components/schemas/Element" }
        },
        "required": ["relation"]
      }
    }
  }
}


